// Virtual Farm Management Simulation
// This program simulates managing different animals on a virtual farm using polymorphism and virtual methods.

#include <iostream>
#include <vector>

using namespace std;

// Base class Animal
class Animal {
public:
    virtual void feed() = 0;  // Virtual method for feeding the animal
    virtual void produceSound() = 0;  // Virtual method for producing sound
};

// Derived class Cow from Animal
class Cow : public Animal {
public:
    void feed() override {
        cout << "Feeding the cow with hay." << endl;
    }

    void produceSound() override {
        cout << "The cow says moo!" << endl;
    }
};

// Derived class Chicken from Animal
class Chicken : public Animal {
public:
    void feed() override {
        cout << "Feeding the chicken with seeds." << endl;
    }

    void produceSound() override {
        cout << "The chicken says cluck!" << endl;
    }
};

int main() {
    // Creating instances of animals
    Cow cow;
    Chicken chicken;

    // Using polymorphism with pointers to the base class
    vector<Animal*> farmAnimals;
    farmAnimals.push_back(&cow);
    farmAnimals.push_back(&chicken);

    // Simulating feeding and sound production for each animal
    for (auto animal : farmAnimals) {
        animal->feed();  // Calls the appropriate feed() based on object type
        animal->produceSound();  // Calls the appropriate produceSound() based on object type
        cout << endl;
    }

    return 0;
}



"""
EXPLANATION OF THE CODE

The program defines a virtual farm management simulation where animals (cows and chickens) are managed using polymorphism.
Animal is an abstract base class with pure virtual methods feed() and produceSound().
Cow and Chicken are derived classes that override the feed() and produceSound() methods specific to each animal.
In main(), instances of Cow and Chicken are created and stored in a vector of Animal pointers.
The program demonstrates polymorphism by iterating through the vector and calling the appropriate methods (feed() and produceSound()) for each animal type.
"""


"""
NOTIONS COVERED

Polymorphism: Demonstrated through the use of Animal pointers to handle different animal types (Cow and Chicken).
Virtual Methods: Utilized in the Animal base class with pure virtual methods (feed() and produceSound()), overridden in derived classes (Cow and Chicken).
Abstraction: Achieved with the Animal base class being abstract, defining interface methods (feed() and produceSound()) without implementation.
"""
